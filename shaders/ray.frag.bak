#version 330 core

uniform vec2 resolution;

uniform vec3 sphere_pos[3];
uniform vec3 camera_pos;

uniform float radii[3];
uniform float reflective[3];

uniform float u_time;

uniform float rotation;
uniform float rotationY;

vec3 color[3] = vec3[3]( 
	vec3(1.0,.6,.3),
	vec3(0.0,.6,.4),
	vec3(.3,.2,.5));

vec3 light_pos = vec3(1.,5.,-8.);

vec4 background_color = vec4(.35,.45,.9,1.);

float rand(vec2 co) {
	return fract(sin(dot(co.xy, vec2(12.9898, 78.233)))*43758.5453123);
}

vec2 intersect_sphere(vec3 O, vec3 D, vec3 sphere_pos, float r) {
	vec3 CO = O - sphere_pos;

	//get ready for quadratic
	float a = dot(D,D);
	float b = 2*dot(CO,D);
	float c = dot(CO, CO) - r*r;

	float discrim = b*b - 4*a*c;

	if (discrim < 0){
		return vec2(1000.,1000.);
	}

	//don't need the backside
	//float t1 = (-b + sqrt(discrim))/(2*a);
	float t2 = (-b - sqrt(discrim))/(2*a);
	float t1 = 0.;
	return vec2(t1,t2);

}

vec3 reflect_ray(vec3 R, vec3 N) {
	return 2 * N * dot(N,R) - R;
}

vec3 world_to_canvas(vec2 st, float fov) {
	float aspect_ration = resolution.x / resolution.y;

	float fovy = radians(fov);

	float view_height = 2.0 * tan(fovy /2.);
	float view_width = view_height * aspect_ration;
	
	float px = (st.x - .5) * view_width;
	float py = (st.y - .5) * view_height;
	return normalize(vec3(px, py, -1.));
}

vec2 closest_intersect(vec3 O, vec3 D, int t_min, int t_max) {
	float closest_t = 1000.;
	vec3 closest_sphere = vec3(0.);

	int sphere_index = -1;

	for(int i = 0; i < 3; i++) {
		vec2 intersect = intersect_sphere(O, D, sphere_pos[i], radii[i]);

		//hardcoding .001 instead of t_min
		if(.001 < intersect.x && intersect.x < t_max && intersect.x < closest_t) {
			closest_t = intersect.x;
			closest_sphere = sphere_pos[i];
			sphere_index = i;
		}
		if(.001< intersect.y && intersect.y < t_max && intersect.y < closest_t) {
			closest_t = intersect.y;
			closest_sphere = sphere_pos[i];
			sphere_index = i;
		}
	}
	return vec2(sphere_index, closest_t);
}

float compute_lighting(vec3 P, vec3 N) {

	float i = 0.;

	float ambient = .34;
	float intensity = 1. - ambient;
	i+=ambient;

	light_pos = vec3(5.*sin(u_time)*1.,cos(u_time)*2.+5.,-4.);

	vec3 L = normalize(light_pos - P);

	float ndl = dot(N,L);
	if(ndl > 0) {
		i += intensity * ndl/(length(N) * length(L));
	}
	vec2 res = closest_intersect(P, L, 1, 1000);
	highp int res_i = int(res.x);
	vec3 shadow_sphere = sphere_pos[res_i];
	float shadow_t = res.y;

	if(length(shadow_sphere) > 0.1) {
		i=ambient;
	}

	return i;
}

//rand function from the book of shaders
//seems pretty ubiquitous

vec3 qtransform(vec4 q, vec3 v) {
	return v + 2.0*cross(cross(v, q.xyz) + q.w*v, q.xyz);
}
vec4 qmul(vec4 l, vec4 r) {
	return vec4(l.w * r.xyz + r.w * l.xyz + cross(l.xyz, r.xyz), l.w * r.w - dot(l.xyz, r.xyz));
}

vec4 trace_ray(vec3 O, vec3 D, int t_min,int t_max, int depth, float rotation, float rotationY, vec2 st) {

	vec4 q = vec4(0., sin(rotation/2), 0., cos(rotation/2));
	vec3 localX = vec3(1., 0., 0.);
	vec3 rotated = qtransform(q, localX);

	vec4 q2 = vec4(rotated * sin(rotationY/2),cos(rotationY/2));

	vec4 q3 = qmul(q, q2);

	D = qtransform(q3, D);

	float closest_t = 1000.;
	vec3 closest_sphere = vec3(0.);

	vec2 res = closest_intersect(O, D, 1, 1000);
	highp int res_i = int(res.x);
	closest_sphere = sphere_pos[res_i];
	closest_t = res.y;

	if(length(closest_sphere) < 0.001) {
		return background_color;
	}

	vec3 P = O + closest_t * D;
	vec3 N = normalize(P - closest_sphere);
	
	//temp is base surface color
	vec4 temp = vec4(color[res_i]*compute_lighting(P,N),1.);


	//vec3 light_dir = normalize(light_pos - P);
	//float light_dist = length(light_pos - P);
	vec4 reflected_color = background_color;

	while(depth>0) {

		if(reflective[res_i] == 0.) {
			break;
			//doesn't work
			/*vec2 seed = vec2(P.xy);
			vec3 random_D = normalize(vec3(rand(seed), rand(seed + vec2(1.)), rand(seed-vec2(3.))) * 2. - 1.);
			vec3 newP = P + random_D;

			res = closest_intersect(newP, random_D, 0, 1000);
			highp int res_i = int(res.x);
			closest_sphere = sphere_pos[res_i];
			closest_t = res.y;*/
			//reflected_color = vec4(color[res_i]*compute_lighting(newP,N),1.); 
			
		}

		vec3 R = reflect_ray(-D, N);
		O = P;

		res = closest_intersect(O, R, 0, 1000);
		highp int res_i = int(res.x);
		closest_sphere = sphere_pos[res_i];
		closest_t = res.y;

		if(length(closest_sphere) < 0.001) {
			//return temp;
			break;
		}

		P = O + closest_t * R;
		N = normalize(P - closest_sphere);
		
		//reflections do not properly show the reflective index of reflected spheres
		vec4 new_color = vec4(color[res_i]*compute_lighting(P,N),1.);

		reflected_color = mix(new_color, reflected_color, reflective[res_i]);

		if(reflective[res_i] == 0.) {
			break;
		}
		
		D = R;
		depth--;
	}

	return temp * (1 - reflective[res_i]) + reflected_color * reflective[res_i];
}

void main() {

	vec2 st = gl_FragCoord.xy / resolution;

	gl_FragColor = trace_ray(camera_pos, world_to_canvas(st, 80.0), 1, 1000, 5, rotation, rotationY, st);
}
